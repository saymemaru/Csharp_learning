@inject GameState State
@using System.Drawing

   <HeadContent>
   <style>
       :root {
           --board-bg: @ColorTranslator.ToHtml(BoardColor);  /** the color of the board **/
           --player1: @ColorTranslator.ToHtml(Player1Color);      /** Player 1's piece color **/
           --player2: @ColorTranslator.ToHtml(Player2Color);     /** Player 2's piece color **/
       }
   </style>
   </HeadContent>

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">🔽</span>
    }
</nav>

<article>
    @winnerMessage  <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>

<div>

   <div class="board">
      @for (var i = 0; i < 42; i++)
      {
         <span class="container">
            <span></span>
         </span>
      }
   </div>

   @for (var i = 0; i < 42; i++)
    {
   <span class="@pieces[i]"></span>
    }
     
</div>

@code {
    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";
    
    private void PlayPiece(byte col)
    {
        errorMessage = string.Empty;
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);

            winnerMessage = State.CheckForWin() switch
            {
                GameState.WinState.Player1_Wins => "Player 1 Wins!",
                GameState.WinState.Player2_Wins => "Player 2 Wins!",
                GameState.WinState.Tie => "It's a tie!",
                _ => ""
            };

            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }
    }

    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }

    [Parameter]
    public Color BoardColor { get; set; } = ColorTranslator.FromHtml("yellow");
    
    [Parameter]
    public Color Player1Color { get; set; } = ColorTranslator.FromHtml("red");
    
    [Parameter]
    public Color Player2Color { get; set; } = ColorTranslator.FromHtml("blue");

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }

// 若要使应用更小，请移除默认布局和额外页面。
// 改进 Board 组件的参数，以便可以传递任何有效的 CSS 颜色值。
// 使用一些 CSS 和 HTML 布局美化指示器外观。
// 引入声音效果。
// 添加可视指示器，并防止在列已满时使用放置按钮。
// 添加网络功能，以便你可以在其浏览器中和好友玩游戏。
// 使用 Blazor 应用程序将游戏插入 .NET MAUI，在手机或平板电脑上玩游戏。

}
